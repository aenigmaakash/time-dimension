CREATE
	OR replace FUNCTION fiscal_year_start_date (cur_date DATE)
RETURNS DATE LANGUAGE plpgsql AS $$

DECLARE start_date DATE;

BEGIN
	SELECT CASE 
			WHEN (TO_CHAR(cur_date::DATE, 'MM'))::INT > 3
				THEN DATE_TRUNC('YEAR', cur_date::DATE) + interval '3 month'
			ELSE (DATE_TRUNC('YEAR', (cur_date::DATE - interval '1 year')) + interval '3 month')::DATE
			END
	INTO start_date;

	RETURN start_date;
END;$$;



create TABLE PUBLIC.TIME_DIMENSION (
	DATE_KEY INT NOT NULL
	,"DATE" DATE NOT NULL
	,DAY_OF_THE_WEEK_NUMBER INT NOT NULL
	,DAY_OF_THE_MONTH_NUMBER INT NOT NULL
	,DAY_OF_THE_QUARTER_NUMBER INT NOT NULL
	,DAY_OF_THE_YEAR_NUMBER INT NOT NULL
	,DAY_OF_THE_WEEK_NAME VARCHAR(20) NOT NULL
	,DAY_OF_THE_WEEK_SHORT_NAME VARCHAR(10) NOT NULL
	,WEEK_OF_THE_MONTH_NUMBER INT NOT NULL
	,WEEK_OF_THE_QUARTER_NUMBER INT NOT NULL
	,WEEK_OF_THE_YEAR_NUMBER INT NOT NULL
	,MONTH_OF_THE_YEAR_NUMBER INT NOT NULL
	,MONTH_NAME VARCHAR(20) NOT NULL
	,MONTH_SHORT_NAME VARCHAR(20) NOT NULL
	,MONTH_START_DATE DATE NOT NULL
	,MONTH_END_DATE DATE NOT NULL
	,YEAR_START_DATE DATE NOT NULL
	,QUARTER_OF_THE_YEAR INT NOT NULL
	,QUARTER_SHORT_NAME VARCHAR(20) NOT NULL
	,QUARTER_START_DATE DATE NOT NULL
	,QUARTER_END_DATE DATE NOT NULL
	,"YEAR" INT NOT NULL
	,YEAR_END_DATE DATE NULL
	,FiscalFirstDayOfYear DATE NULL
	,FiscalLastDayOfYear DATE NULL
	,FiscalDayOfYear INT NULL
	,FiscalWeekOfYear INT NULL
	,FiscalMonth smallint NULL
	,FiscalQuarter smallint NULL
	,FiscalQuarterName VARCHAR(4) NULL
	,FiscalYear VARCHAR(15) NULL
	,FiscalMonthYear VARCHAR(10) NULL
	,FiscalMMYYYY VARCHAR(10) NULL
	,CONSTRAINT "TIME__PK" PRIMARY KEY (DATE_KEY)
	)
	WITH (OIDS = FALSE);

INSERT INTO PUBLIC.TIME_DIMENSION
SELECT
	--DATE KEY(SEQUENTIAL)
	cast(SEQ + 1 AS INT) AS DATE_KEY
	,
	-- DATE
	DATUM AS DATE
	,
	--DAY_OF_THE WEEK_NUMBER  1-SUN : 7-SAT
	CAST(TO_CHAR(DATUM, 'D') AS INT) AS DAY_OF_THE_WEEK_NUMBER
	,
	--DAY_OF_THE_MONTH_NUMBER
	CAST(EXTRACT(DAY FROM DATUM) AS SMALLINT) AS DAY_OF_THE_MONTH_NUMBER
	,
	--DAY_OF_THE_QUARTER_NUMBER
	DATUM - (DATE_TRUNC('QUARTER', DATUM))::DATE + 1 AS DAY_OF_THE_QUARTER_NUMBER
	,
	-- DAY_OF_THE_YEAR_NUMBER
	CAST(EXTRACT('DOY' FROM DATUM) AS INT) AS DAY_OF_THE_YEAR_NUMBER
	,
	--DAY_OF_THE_WEEK_NAME
	TO_CHAR(DATUM, 'DAY') AS DAY_OF_THE_WEEK_NAME
	,
	--DAY_OF_THE_WEEK_SHORT_NAME
	TO_CHAR(DATUM, 'DY') AS DAY_OF_THE_WEEK_SHORT_NAME
	,
	--WEEK_OF_THE_MONTH_NUMBER
	(TO_CHAR(DATUM, 'W'))::INT AS WEEK_OF_THE_MONTH_NUMBER
	,
	--WEEK_OF_THE_QUARTER_NUMBER
	(DATUM - (DATE_TRUNC('QUARTER', DATUM))::DATE) / 7 + 1 AS WEEK_OF_THE_QUARTER_NUMBER
	,
	--WEEK_OF_THE_YEAR_NUMBER
	CAST(TO_CHAR(DATUM, 'WW') AS INT) AS WEEK_OF_THE_YEAR_NUMBER
	,
	--MONTH_OF_THE_YEAR_NUMBER
	CAST(TO_CHAR(DATUM, 'MM') AS INT) AS MONTH_OF_THE_YEAR_NUMBER
	,
	--MONTH_NAME
	TO_CHAR(DATUM, 'MONTH') AS MONTH_NAME
	,
	--MONTH_SHORT_NAME
	TO_CHAR(DATUM, 'MON') AS MONTH_SHORT_NAME
	,
	--MONTH_START_DATE
	CAST(DATE_TRUNC('MONTH', DATUM) AS DATE) AS MONTH_START_DATE
	,
	--MONTH_END_DATE
	(DATE_TRUNC('MONTH', DATUM)::DATE + INTERVAL '1 MONTH - 1 DAY')::DATE AS MONTH_END_DATE
	,
	--YEAR_START_DATE
	CAST(DATE_TRUNC('YEAR', DATUM) AS DATE) AS YEAR_START_DATE
	,
	--QUARTER_OF_THE_YEAR
	CAST(TO_CHAR(DATUM, 'Q') AS INT) AS QUARTER_OF_THE_YEAR
	,
	--QUARTER_SHORT_NAME
	'Q' || TO_CHAR(DATUM, 'Q') AS QUARTER_SHORT_NAME
	,
	--QUARTER_START_DATE
	CAST(DATE_TRUNC('QUARTER', DATUM) AS DATE) AS QUARTER_START_DATE
	,
	--QUARTER_END_DATE
	(DATE_TRUNC('QUARTER', DATUM::DATE) + INTERVAL '3 MONTH - 1 DAY')::DATE AS QUARTER_END_DATE
	,
	--YEAR
	CAST(EXTRACT(YEAR FROM DATUM) AS INT) AS "YEAR"
	,
	--YEAR_END_DATE
	(DATE_TRUNC('YEAR', DATUM)::DATE + INTERVAL '12 MONTH - 1 DAY')::DATE AS YEAR_END_DATE
	,
	--FiscalFirstDayOfYear
	fiscal_year_start_date(DATUM:: date)  AS FiscalFirstDayOfYear
	,
	--FiscalLastDayOfYear
	(fiscal_year_start_date(DATUM)::DATE + interval '12 MONTH - 1 DAY')::DATE AS FiscalLastDayOfYear
	,
	--FiscalDayOfYear
	(DATUM - fiscal_year_start_date(DATUM)) + 1     AS FiscalDayOfYear
	,
	--FiscalWeekOfYear
	(((DATUM - fiscal_year_start_date(DATUM)) + 1) / 7) + 1      AS FiscalWeekOfYear
	,
	--FiscalMonth
	date_part('month', age(DATUM, fiscal_year_start_date(DATUM))) + 1 AS FiscalMonth
	,
	--Fiscal Quarter
	((((date_part('month', age(DATUM, fiscal_year_start_date(DATUM)))) + 1) / 4)::INT) + 1 AS FiscalQuarter
	,
	--FiscalQuarterName
	'Q' || (((((date_part('month', age(DATUM, fiscal_year_start_date(DATUM)))) + 1) / 4)::INT) + 1)::CHAR AS FiscalQuarterName
	,
	--FiscalYear
	EXTRACT(YEAR FROM DATUM)::VARCHAR(5) || '-' || (EXTRACT(YEAR FROM DATUM) + 1)::VARCHAR(5) AS FiscalYear
	,
	--FiscalMonthYear
	'APRIL' AS FiscalMonthYear
	,
	--FiscalMMYYYY
	to_char(fiscal_year_start_date(DATUM), 'mm-yyyy') AS FiscalMMYYYY
FROM
	-- GENERATE DAYS FOR THE NEXT ~100 YEARS STARTING FROM 1925.
	(
	SELECT '2005-01-01'::DATE + GENERATE_SERIES AS DATUM
		,GENERATE_SERIES AS SEQ
	FROM GENERATE_SERIES(0, 10 * 365 + 24, 1)
	) DQ
ORDER BY 1;
